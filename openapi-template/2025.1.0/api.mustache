{{>header}}
{{>part_of}}
{{#operations}}

abstract class {{{classname}}} {
  factory {{{classname}}}(ApiClient apiClient) => _{{{classname}}}(apiClient);

  {{#operation}}
  {{#summary}}
  /// {{{.}}}
  {{/summary}}
  {{#notes}}
    {{#summary}}
  ///
    {{/summary}}
  /// {{{notes}}}
  ///
  /// Note: This method returns the HTTP [Response].
  {{/notes}}
  {{^notes}}
    {{#summary}}
  ///
  /// Note: This method returns the HTTP [Response].
    {{/summary}}
    {{^summary}}
  /// Performs an HTTP '{{{httpMethod}}} {{{path}}}' operation and returns the [Response].
    {{/summary}}
  {{/notes}}
  {{#hasParams}}
    {{#summary}}
  ///
    {{/summary}}
    {{^summary}}
      {{#notes}}
  ///
      {{/notes}}
    {{/summary}}
  /// Parameters:
  ///
  {{/hasParams}}
  {{#allParams}}
  /// * [{{{dataType}}}] {{{paramName}}}{{#required}} (required){{/required}}{{#optional}} (optional){{/optional}}:
    {{#description}}
  ///   {{{.}}}
    {{/description}}
    {{^-last}}
  ///
    {{/-last}}
  {{/allParams}}
  // ignore: body_might_complete_normally
  Future<Response> {{{nickname}}}Unsafe({
    {{#allParams}}
      {{#required}}required {{/required}}{{{dataType}}}{{^required}}?{{/required}} {{paramName}},
    {{/allParams}}
      ApiOptions options = const ApiOptions(),
    });

  {{#summary}}
  /// {{{.}}}
  {{/summary}}
  {{#notes}}
  {{#summary}}
  ///
  {{/summary}}
  /// {{{notes}}}
  {{/notes}}
  {{#hasParams}}
    {{#summary}}
  ///
    {{/summary}}
    {{^summary}}
      {{#notes}}
  ///
      {{/notes}}
    {{/summary}}
  /// Parameters:
  ///
  {{/hasParams}}
  {{#allParams}}
  /// * [{{{dataType}}}] {{{paramName}}}{{#required}} (required){{/required}}{{#optional}} (optional){{/optional}}:
    {{#description}}
  ///   {{{.}}}
    {{/description}}
    {{^-last}}
  ///
    {{/-last}}
  {{/allParams}}
  // ignore: body_might_complete_normally
  Future<{{#returnType}}ApiResponse<{{{.}}}>{{/returnType}}{{^returnType}}ApiResponse<Uint8List>{{/returnType}}> {{{nickname}}}({
    {{#allParams}}
      {{#required}}required {{/required}}{{{dataType}}}{{^required}}?{{/required}} {{paramName}},
    {{/allParams}}
      ApiOptions options = const ApiOptions(),
    });
  {{/operation}}
}

class _{{{classname}}} implements {{{classname}}} {
  _{{{classname}}}(this.apiClient);

  final ApiClient apiClient;
  {{#operation}}

  {{#summary}}
  /// {{{.}}}
  {{/summary}}
  {{#notes}}
    {{#summary}}
  ///
    {{/summary}}
  /// {{{notes}}}
  ///
  /// Note: This method returns the HTTP [Response].
  {{/notes}}
  {{^notes}}
    {{#summary}}
  ///
  /// Note: This method returns the HTTP [Response].
    {{/summary}}
    {{^summary}}
  /// Performs an HTTP '{{{httpMethod}}} {{{path}}}' operation and returns the [Response].
    {{/summary}}
  {{/notes}}
  {{#hasParams}}
    {{#summary}}
  ///
    {{/summary}}
    {{^summary}}
      {{#notes}}
  ///
      {{/notes}}
    {{/summary}}
  /// Parameters:
  ///
  {{/hasParams}}
  {{#allParams}}
  /// * [{{{dataType}}}] {{{paramName}}}{{#required}} (required){{/required}}{{#optional}} (optional){{/optional}}:
    {{#description}}
  ///   {{{.}}}
    {{/description}}
    {{^-last}}
  ///
    {{/-last}}
  {{/allParams}}
  // ignore: body_might_complete_normally
  @override
  Future<Response> {{{nickname}}}Unsafe({
    {{#allParams}}
      {{#required}}required {{/required}}{{{dataType}}}{{^required}}?{{/required}} {{paramName}},
    {{/allParams}}
      ApiOptions options = const ApiOptions(),
    }) async {
    // ignore: prefer_const_declarations
    final path = r'{{{path}}}'{{#pathParams}}
      .replaceAll({{=<% %>=}}'{<% baseName %>}'<%={{ }}=%>, {{{paramName}}}{{^isString}}.toString(){{/isString}}){{/pathParams}};

    // ignore: prefer_final_locals
    Object? postBody{{#bodyParam}} = {{{paramName}}}{{/bodyParam}};

    final queryParams = <QueryParam>[...options.extraQueryParams];
    final headerParams = <String, String>{...options.extraHeaders};
    final formParams = <String, String>{};
    {{#hasQueryParams}}

      {{#queryParams}}
        {{^required}}
    if ({{{paramName}}} != null) {
          {{/required}}
      queryParams.addAll(_queryParams('{{{collectionFormat}}}', '{{{baseName}}}', {{{paramName}}}));
          {{^required}}
    }
        {{/required}}
      {{/queryParams}}
    {{/hasQueryParams}}
    {{#hasHeaderParams}}

      {{#headerParams}}
        {{#required}}
    headerParams[r'{{{baseName}}}'] = _parameterToString({{{paramName}}});
        {{/required}}
        {{^required}}
    if ({{{paramName}}} != null) {
      headerParams[r'{{{baseName}}}'] = _parameterToString({{{paramName}}});
    }
        {{/required}}
      {{/headerParams}}
    {{/hasHeaderParams}}

    const contentTypes = <String>[{{#prioritizedContentTypes}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/prioritizedContentTypes}}];

    {{#isMultipart}}
    bool hasFields = false;
    final mp = MultipartRequest('{{{httpMethod}}}', Uri.parse(path));
    {{#formParams}}
    {{^isFile}}
    if ({{{paramName}}} != null) {
      hasFields = true;
      mp.fields[r'{{{baseName}}}'] = _parameterToString({{{paramName}}});
    }
    {{/isFile}}
    {{#isFile}}
    if ({{{paramName}}} != null) {
      hasFields = true;
      mp.fields[r'{{{baseName}}}'] = {{{paramName}}}.field;
      mp.files.add({{{paramName}}});
    }
    {{/isFile}}
    {{/formParams}}
    if (hasFields) {
      postBody = mp;
    }
    {{/isMultipart}}
    {{^isMultipart}}
    {{#formParams}}
    {{^isFile}}
    if ({{{paramName}}} != null) {
      formParams[r'{{{baseName}}}'] = _parameterToString({{{paramName}}});
    }
    {{/isFile}}
    {{/formParams}}
    {{/isMultipart}}

    return apiClient.invokeAPI(
      path,
      '{{{httpMethod}}}',
      queryParams,
      postBody,
      headerParams,
      formParams,
      contentTypes.isEmpty ? null : contentTypes.first,
    );
  }

  {{#summary}}
  /// {{{.}}}
  {{/summary}}
  {{#notes}}
  {{#summary}}
  ///
  {{/summary}}
  /// {{{notes}}}
  {{/notes}}
  {{#hasParams}}
    {{#summary}}
  ///
    {{/summary}}
    {{^summary}}
      {{#notes}}
  ///
      {{/notes}}
    {{/summary}}
  /// Parameters:
  ///
  {{/hasParams}}
  {{#allParams}}
  /// * [{{{dataType}}}] {{{paramName}}}{{#required}} (required){{/required}}{{#optional}} (optional){{/optional}}:
    {{#description}}
  ///   {{{.}}}
    {{/description}}
    {{^-last}}
  ///
    {{/-last}}
  {{/allParams}}
  // ignore: body_might_complete_normally
  @override
  Future<{{#returnType}}ApiResponse<{{{.}}}>{{/returnType}}{{^returnType}}ApiResponse<Uint8List>{{/returnType}}> {{{nickname}}}({
    {{#allParams}}
      {{#required}}required {{/required}}{{{dataType}}}{{^required}}?{{/required}} {{paramName}},
    {{/allParams}}
      ApiOptions options = const ApiOptions(),
    }) async {
    final response = await {{{nickname}}}Unsafe(
      {{#allParams}} {{{paramName}}}: {{{paramName}}}, {{/allParams}}
      options: options,
    );
    if (response.statusCode >= HttpStatus.badRequest) {
      throw ApiException.fromResponse(response);
    }
    {{#returnType}}
    {{#native_serialization}}
    {{#isArray}}
      final responseBody = _decodeBodyBytes(response);
      final model = (await apiClient.deserializeAsync(responseBody, '{{{returnType}}}') as List)
        .cast<{{{returnBaseType}}}>()
        .{{#uniqueItems}}toSet(){{/uniqueItems}}{{^uniqueItems}}toList(growable: false){{/uniqueItems}};
    {{/isArray}}
    {{^isArray}}
    {{#isMap}}
      final model = {{{returnType}}}.from(await apiClient.deserializeAsync(_decodeBodyBytes(response), '{{{returnType}}}'),);
    {{/isMap}}
    {{^isMap}}
      final model = await apiClient.deserializeAsync(_decodeBodyBytes(response), '{{{returnType}}}',) as {{{returnType}}};
    {{/isMap}}{{/isArray}}{{/native_serialization}}
      return ApiResponse._(response, model);
    {{/returnType}}
    {{^returnType}}
      return ApiResponse._(response, response.bodyBytes);
    {{/returnType}}
  }
  {{/operation}}
}
{{/operations}}
